<local:RSSerialPort
    x:Class="RS.HMI.Client.Controls.RSModBusRTU"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:converters="clr-namespace:RS.Widgets.Converters;assembly=RS.Widgets"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:local="clr-namespace:RS.HMI.Client.Controls"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:rs="https://github.com/luo-ross/Widgets"
    d:DesignHeight="450"
    d:DesignWidth="800"
    mc:Ignorable="d">
    <local:RSSerialPort.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/RS.Widgets;component/Styles/Controls.Button.xaml" />
                <ResourceDictionary Source="pack://application:,,,/RS.Widgets;component/Styles/Controls.Effects.xaml" />
                <ResourceDictionary Source="pack://application:,,,/RS.Widgets;component/Styles/Controls.Icons.xaml" />
                <ResourceDictionary Source="pack://application:,,,/RS.Widgets;component/Styles/Controls.TextBlock.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <Style
                x:Key="RSApp.Styles.DataGridTextBlockStyle"
                BasedOn="{StaticResource RSApp.Styles.TextBlockStyle}"
                TargetType="{x:Type TextBlock}">
                <Setter Property="VerticalAlignment" Value="Stretch" />
                <Setter Property="HorizontalAlignment" Value="Stretch" />
                <Setter Property="Padding" Value="2,3,2,3" />
            </Style>

            <Style
                x:Key="RSApp.Styles.DataGridComboBoxStyle"
                BasedOn="{StaticResource RSApp.Styles.ComboBoxStyle}"
                TargetType="{x:Type ComboBox}">
                <Setter Property="Padding" Value="2,0,2,0" />
            </Style>

            <converters:EnumToHexConverter x:Key="EnumToHexConverter" />

            <Style TargetType="{x:Type local:RSModBusRTU}">
                <Setter Property="Background" Value="#fff" />
                <Setter Property="Margin" Value="3" />
                <Setter Property="rs:ControlsHelper.CornerRadius" Value="5" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type local:RSModBusRTU}">
                            <rs:RSDialog x:Name="PART_RSDialog">
                                <GroupBox
                                    rs:ControlsHelper.CornerRadius="{TemplateBinding rs:ControlsHelper.CornerRadius}"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}">
                                    <GroupBox.Header>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="auto" />
                                                <ColumnDefinition />
                                                <ColumnDefinition Width="auto" />
                                            </Grid.ColumnDefinitions>
                                            <TextBlock Text="{TemplateBinding Title}" />

                                            <TextBlock
                                                Grid.Column="1"
                                                HorizontalAlignment="Center"
                                                Foreground="#06b025"
                                                Text="{TemplateBinding CommuStatusDes}" />
                                            <Border Grid.Column="2">
                                                <StackPanel HorizontalAlignment="Right" Orientation="Horizontal">
                                                    <Button
                                                        x:Name="PART_BtnConnect"
                                                        Content="连接"
                                                        Style="{StaticResource RSApp.Styles.DefaultButton}" />
                                                    <Button
                                                        x:Name="PART_BtnDisConnect"
                                                        Content="断开连接"
                                                        Style="{StaticResource RSApp.Styles.DefaultButton}" />
                                                    <Button
                                                        x:Name="PART_BtnSaveConfig"
                                                        Content="保存配置"
                                                        Style="{StaticResource RSApp.Styles.DefaultButton}" />
                                                </StackPanel>
                                            </Border>
                                        </Grid>
                                    </GroupBox.Header>

                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="auto" />
                                            <RowDefinition Height="auto" />
                                            <RowDefinition />
                                            <RowDefinition Height="auto" />
                                        </Grid.RowDefinitions>
                                        <Grid Grid.Row="0" Margin="5">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="auto" />
                                                <RowDefinition Height="auto" />
                                                <RowDefinition Height="auto" />
                                            </Grid.RowDefinitions>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="auto" />
                                                <ColumnDefinition />
                                                <ColumnDefinition Width="auto" />
                                                <ColumnDefinition />
                                                <ColumnDefinition Width="auto" />
                                                <ColumnDefinition />
                                                <ColumnDefinition Width="auto" />
                                                <ColumnDefinition />
                                                <ColumnDefinition Width="auto" />
                                                <ColumnDefinition />
                                            </Grid.ColumnDefinitions>

                                            <TextBlock
                                                Grid.Column="0"
                                                Margin="3,0,3,0"
                                                Text="Com口">
                                                <TextBlock.ToolTip>
                                                    <ToolTip>
                                                        <TextBlock Width="550" TextWrapping="Wrap">
                                                            <Run Text="#### 定义与概念" />
                                                            <LineBreak />
                                                            <Run Text="COM（Communication）端口，也被称为串行通信端口，是计算机与外部设备进行串行数据传输的接口。在早期的计算机系统中，COM 端口是连接鼠标、调制解调器、打印机等外部设备的主要方式。它通过逐位传输数据的方式进行通信，每次只传输一个二进制位，因此通信速度相对较慢，但具有线路简单、成本低、抗干扰能力较强等优点，适合长距离通信和一些对数据传输速率要求不高的设备连接。" />
                                                            <LineBreak /><LineBreak />

                                                            <Run Text="#### 工作原理" />
                                                            <LineBreak />
                                                            <Run Text="COM 端口采用串行通信协议，数据以二进制位的形式在发送端和接收端之间依次传输。在数据传输过程中，需要定义一些基本的通信参数，包括波特率、数据位、停止位和奇偶校验位等。这些参数必须在通信双方（计算机和外部设备）设置一致，否则会导致数据传输错误。" />
                                                            <LineBreak />
                                                            <Run Text="- **波特率**：指的是每秒传输的二进制位数，它决定了数据传输的速度。常见的波特率有 9600、115200 等。" />
                                                            <LineBreak />
                                                            <Run Text="- **数据位**：表示每个数据帧中实际传输的数据位数，常见的有 5 位、6 位、7 位和 8 位。" />
                                                            <LineBreak />
                                                            <Run Text="- **停止位**：用于标志一个数据帧的结束，常见的设置有 1 位、1.5 位和 2 位。" />
                                                            <LineBreak />
                                                            <Run Text="- **奇偶校验位**：用于检测数据传输过程中是否发生错误，常见的奇偶校验方式有奇校验、偶校验、无校验等。" />
                                                            <LineBreak /><LineBreak />

                                                            <Run Text="#### 常见应用场景" />
                                                            <LineBreak />
                                                            <Run Text="1. **工业控制**：在工业自动化领域，COM 端口常用于连接各种工业设备，如 PLC（可编程逻辑控制器）、传感器、执行器等。通过 COM 端口，计算机可以与这些设备进行数据交换，实现对工业生产过程的监控和控制。" />
                                                            <LineBreak />
                                                            <Run Text="2. **嵌入式系统开发**：在嵌入式系统开发中，COM 端口是调试和通信的重要接口。开发人员可以通过 COM 端口将调试信息输出到计算机上，方便对嵌入式系统进行调试和故障排查。同时，也可以通过 COM 端口与其他设备进行通信，实现数据的传输和交互。" />
                                                            <LineBreak />
                                                            <Run Text="3. **旧设备连接**：对于一些老旧的外部设备，如早期的调制解调器、绘图仪等，它们可能只支持 COM 端口连接。因此，在使用这些设备时，需要通过计算机的 COM 端口进行连接和通信。" />
                                                        </TextBlock>
                                                    </ToolTip>
                                                </TextBlock.ToolTip>
                                            </TextBlock>
                                            <ComboBox
                                                Grid.Column="1"
                                                ItemsSource="{Binding Source={x:Static local:RSSerialPort.SerialPortNameList}}"
                                                SelectedValue="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=PortName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                                            <TextBlock
                                                Grid.Column="2"
                                                Margin="10,0,3,0"
                                                Text="波特率">
                                                <TextBlock.ToolTip>
                                                    <ToolTip>
                                                        <TextBlock Width="400" TextWrapping="Wrap">
                                                            <Run Text="波特率（Baud Rate）是在电子通信领域用来衡量数据传输速率的一个重要指标，以下是关于它的详细介绍：" />
                                                            <LineBreak />
                                                            <LineBreak />
                                                            <Run Text="### 定义" />
                                                            <LineBreak />
                                                            <Run Text="波特率指的是信号被调制以后在单位时间内的变化次数，即单位时间内载波参数变化的次数，它的单位是波特（Baud），简称“B”。在串口通信等数据传输场景中，常被用于表示每秒传输的码元数。码元是一个数据信号的基本单元，它可以是一个二进制位（bit），也可以是多个二进制位的组合。" />
                                                            <LineBreak />
                                                            <LineBreak />
                                                            <Run Text="### 与比特率的关系" />
                                                            <LineBreak />
                                                            <Run Text="- 一般来说，在二进制数字传输中，当一个码元仅携带1个比特的信息量时，波特率与比特率在数值上是相等的。例如，在一个简单的二进制信号传输系统中，信号只有两种状态（0和1），此时波特率为100波特，就意味着每秒传输100个码元，由于每个码元对应1个比特，所以比特率也是100比特/秒（bps）。" />
                                                            <LineBreak />
                                                            <Run Text="- 然而，在一些更复杂的调制方式下，一个码元可以携带多个比特的信息。比如在采用四相相移键控（QPSK）调制技术时，每个码元可以表示4种不同的状态，分别对应2个比特的信息（00、01、10、11）。如果此时波特率为100波特，那么比特率就是200bps，即波特率乘以每个码元携带的比特数。" />
                                                            <LineBreak />
                                                            <LineBreak />
                                                            <Run Text="### 常见取值及应用场景" />
                                                            <LineBreak />
                                                            <Run Text="- **常见取值**：在串口通信中，常见的波特率有9600、19200、38400、57600、115200等。在以太网通信中，常用的波特率有10Mbps、100Mbps、1000Mbps等，这里的Mbps实际上就是兆比特每秒，在以太网中由于编码方式等原因，波特率和比特率在数值上有所不同，但本质上也是用于衡量数据传输的速率。" />
                                                            <LineBreak />
                                                            <Run Text="- **应用场景**" />
                                                            <LineBreak />
                                                            <Run Text="    - **串口通信**：在计算机与外部设备（如单片机、调制解调器等）通过串口进行通信时，需要设置相同的波特率，以确保数据能够正确地发送和接收。比如，将计算机的串口波特率设置为9600，那么它就会按照每秒9600个码元的速度发送和接收数据。如果与它连接的设备波特率设置为19200，就会导致数据传输错误或无法通信。" />
                                                            <LineBreak />
                                                            <Run Text="    - **网络通信**：在网络设备之间进行数据传输时，波特率决定了网络的传输速度。例如，一个100Mbps的以太网接口，意味着它每秒可以传输100兆比特的数据，这里的比特率就是基于特定的编码和传输方式下的波特率转换而来的。" />
                                                            <LineBreak />
                                                            <LineBreak />
                                                            <Run Text="### 影响因素" />
                                                            <LineBreak />
                                                            <Run Text="- **传输介质**：不同的传输介质对波特率有不同的限制。例如，双绞线的传输频率有限，一般适用于较低波特率的传输，如10Mbps或100Mbps的以太网。而光纤具有更宽的带宽，可以支持更高的波特率，如10Gbps甚至更高的高速网络传输。" />
                                                            <LineBreak />
                                                            <Run Text="- **信号干扰**：在信号传输过程中，噪声和干扰会影响信号的质量。如果干扰较强，为了保证数据的准确性，就需要降低波特率，采用更稳健的调制方式和编码方式，以增加信号的抗干扰能力。" />
                                                            <LineBreak />
                                                            <Run Text="- **设备性能**：发送端和接收端设备的处理能力、时钟精度等也会影响波特率。例如，一些低端的单片机由于处理速度有限，可能无法支持过高的波特率进行串口通信；而高性能的网络交换机则可以支持高速的以太网波特率。" />
                                                            <LineBreak />
                                                            <LineBreak />
                                                            <Run Text="### 波特率的设置与计算" />
                                                            <LineBreak />
                                                            <Run Text="- **设置**：在实际应用中，需要根据具体的通信需求和设备性能来设置波特率。在串口通信中，可以通过对串口控制器的寄存器进行设置来指定波特率。在网络设备中，通常可以在设备的配置界面中设置网络接口的波特率。" />
                                                            <LineBreak />
                                                            <Run Text="- **计算**：在一些简单的通信系统中，波特率可以通过时钟频率和分频系数来计算。例如，在一个基于单片机的串口通信系统中，已知系统时钟频率为11.0592MHz，若要设置波特率为9600，根据串口通信的波特率计算公式：波特率 = 时钟频率/(12*(256 - 波特率寄存器值))，可以计算出需要设置的波特率寄存器值。" />
                                                        </TextBlock>
                                                    </ToolTip>
                                                </TextBlock.ToolTip>
                                            </TextBlock>
                                            <ComboBox
                                                Grid.Column="3"
                                                ItemsSource="{Binding Source={x:Static local:RSSerialPort.BaudRateList}}"
                                                SelectedValue="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=BaudRate, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                                            <TextBlock
                                                Grid.Column="4"
                                                Margin="10,0,3,0"
                                                Text="数据位">
                                                <TextBlock.ToolTip>
                                                    <ToolTip>
                                                        <TextBlock Width="400" TextWrapping="Wrap">
                                                            <Run Text="在串口通信中，数据位是一个非常关键的参数，它对数据传输的效率和精度有着直接的影响。下面将对串口数据位进行详细的介绍。" />
                                                            <LineBreak /><LineBreak />

                                                            <Run Text="### 定义" />
                                                            <LineBreak />
                                                            <Run Text="在串口通信里，每一次传输的数据都是以帧为单位的，而数据位就是指在每一帧数据中用于实际传输用户数据的二进制位的数量。除了数据位之外，每一帧数据还可能包含起始位、停止位以及奇偶校验位等部分，它们共同保障了数据传输的完整性和准确性。" />
                                                            <LineBreak /><LineBreak />

                                                            <Run Text="### 常见的数据位取值" />
                                                            <LineBreak />
                                                            <Run Text="常见的数据位取值有 5 位、6 位、7 位和 8 位。在实际的应用场景中，8 位数据位是最为常用的，下面为你分析不同数据位的特点和适用场景：" />
                                                            <LineBreak />
                                                            <Run Text="- **5 位数据位**：这种情况通常应用于一些早期的设备或者对数据传输量要求极低的特殊设备。由于 5 位数据位一次只能传输较少的数据，最多可以表示 \(2^5 = 32\) 种不同的状态，所以它适用于那些只需要传输简单字符或者少量控制信息的设备。" />
                                                            <LineBreak />
                                                            <Run Text="- **6 位数据位**：可以表示 \(2^6 = 64\) 种不同的状态，相较于 5 位数据位，它能传输的数据量有所增加。在一些对数据量需求不是特别大，但又比 5 位数据位稍高的场合会使用到，不过相对来说使用频率不是很高。" />
                                                            <LineBreak />
                                                            <Run Text="- **7 位数据位**：常用于 ASCII 码字符的传输。ASCII 码是一种广泛使用的字符编码标准，它使用 7 位二进制数来表示 128 种不同的字符，包括英文字母、数字和一些常用符号等。因此，当需要传输基于 ASCII 码的文本数据时，7 位数据位是一个合适的选择。" />
                                                            <LineBreak />
                                                            <Run Text="- **8 位数据位**：这是目前最常用的数据位设置。8 位数据位可以表示 \(2^8 = 256\) 种不同的状态，能够满足更多类型数据的传输需求。它不仅可以用于传输扩展 ASCII 码字符（扩展 ASCII 码使用 8 位表示 256 种字符），还可以用于传输二进制数据，如图片、音频等文件的片段。" />
                                                            <LineBreak /><LineBreak />

                                                            <Run Text="### 数据位与传输效率和精度的关系" />
                                                            <LineBreak />
                                                            <Run Text="- **传输效率**：数据位的数量直接影响着串口通信的传输效率。数据位越多，每一帧能够传输的实际数据量就越大，在相同的波特率下，单位时间内传输的数据也就越多，传输效率也就越高。例如，在波特率为 9600bps 的情况下，使用 8 位数据位时每秒能够传输的有效数据量就比使用 7 位数据位时要多。" />
                                                            <LineBreak />
                                                            <Run Text="- **传输精度**：在某些对数据精度要求较高的应用中，合适的数据位设置至关重要。比如在传感器数据采集的应用中，如果传感器输出的数据精度较高，就需要足够的数据位来准确表示这些数据。如果数据位设置过少，可能会导致数据丢失或者精度降低。" />
                                                            <LineBreak /><LineBreak />
                                                        </TextBlock>
                                                    </ToolTip>
                                                </TextBlock.ToolTip>
                                            </TextBlock>

                                            <ComboBox
                                                Grid.Column="5"
                                                ItemsSource="{Binding Source={x:Static local:RSSerialPort.DataBitsList}}"
                                                SelectedValue="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=DataBits, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

                                            <TextBlock
                                                Grid.Column="6"
                                                Margin="10,0,3,0"
                                                Text="停止位">
                                                <TextBlock.ToolTip>
                                                    <ToolTip>
                                                        <TextBlock Width="450" TextWrapping="Wrap">
                                                            <Run Text="在 C# 中，`System.IO.Ports.StopBits` 枚举用于定义串口通信中每个数据帧末尾使用的停止位数量。停止位用于标志一帧数据传输结束，帮助接收方识别数据帧边界。以下是 `StopBits` 枚举各成员的详细解释：" />
                                                            <LineBreak /><LineBreak />

                                                            <Run Text="### 枚举成员及解释" />
                                                            <LineBreak />
                                                            <Run Text="- **`None`**：此值表示不使用停止位。但在实际串口通信中，不使用停止位极为罕见，因为这会使接收方难以确定数据帧的结束位置，增加数据接收出错的几率。" />
                                                            <LineBreak />
                                                            <Run Text="- **`One`**：表示使用 1 个停止位。这是最常用的设置，适用于大多数串口通信场景。1 个停止位能在保证数据准确接收的同时，减少传输时间和带宽占用，提高传输效率。" />
                                                            <LineBreak />
                                                            <Run Text="- **`OnePointFive`**：代表使用 1.5 个停止位。这种设置相对较少使用，主要用于一些早期设备或特定通信协议。在通信线路干扰较大或设备时钟精度较低时，1.5 个停止位可提供更宽的时间裕量，帮助接收方更准确地识别数据帧结束。" />
                                                            <LineBreak />
                                                            <Run Text="- **`Two`**：意味着使用 2 个停止位。当通信环境较差、数据传输速率较高或设备间时钟同步存在问题时，使用 2 个停止位可增加接收方识别数据帧结束的可靠性，减少误判可能性，但会增加传输时间。" />
                                                        </TextBlock>
                                                    </ToolTip>
                                                </TextBlock.ToolTip>
                                            </TextBlock>
                                            <ComboBox
                                                Grid.Column="7"
                                                ItemsSource="{Binding Source={x:Static local:RSSerialPort.StopBitsList}}"
                                                SelectedValue="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=StopBits, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

                                            <TextBlock
                                                Grid.Column="8"
                                                Margin="10,0,3,0"
                                                Text="奇偶校验">
                                                <TextBlock.ToolTip>
                                                    <ToolTip>
                                                        <TextBlock Width="500" TextWrapping="Wrap">
                                                            <Run Text="在 C# 中，`System.IO.Ports.Parity` 枚举用于定义串口通信中奇偶校验的方式。奇偶校验是一种简单的数据校验方法，用于检测数据传输过程中是否发生错误。它通过在数据位后添加一个额外的奇偶校验位来实现，接收方根据此位判断数据是否可能出错。以下是 `Parity` 枚举各成员的详细解释：" />
                                                            <LineBreak /><LineBreak />

                                                            <Run Text="### 枚举成员及解释" />
                                                            <LineBreak />
                                                            <Run Text="- **`None`**：表示不进行奇偶校验。当对数据传输准确性要求不高，或数据本身已有其他可靠校验机制时，可选择此方式，能提高传输效率，因为无需额外传输奇偶校验位。" />
                                                            <LineBreak />
                                                            <Run Text="- **`Odd`**：奇数奇偶校验。发送方计算数据位中 1 的个数，若为偶数，奇偶校验位设为 1，使包括奇偶校验位在内的整个数据中 1 的总数为奇数；若数据位中 1 的个数本身为奇数，奇偶校验位设为 0。接收方按同样规则检查 1 的总数是否为奇数，判断数据传输是否出错。" />
                                                            <LineBreak />
                                                            <Run Text="- **`Even`**：偶数奇偶校验。与奇数奇偶校验相反，发送方计算数据位中 1 的个数，若为奇数，奇偶校验位设为 1，使包括奇偶校验位在内的整个数据中 1 的总数为偶数；若数据位中 1 的个数本身为偶数，奇偶校验位设为 0。接收方检查 1 的总数是否为偶数来判断数据传输是否出错。" />
                                                            <LineBreak />
                                                            <Run Text="- **`Mark`**：标记奇偶校验。在此校验方式中，奇偶校验位始终被设置为 1，无论数据位的内容如何。这种校验方式相对较少使用，因为它不能像奇数或偶数奇偶校验那样有效地检测数据传输错误，更多用于特定的通信协议或设备要求。" />
                                                            <LineBreak />
                                                            <Run Text="- **`Space`**：空格奇偶校验。与标记奇偶校验相反，空格奇偶校验中奇偶校验位始终被设置为 0，同样主要用于特定的通信协议或设备要求，在检测数据传输错误方面的能力相对有限。" />
                                                        </TextBlock>
                                                    </ToolTip>
                                                </TextBlock.ToolTip>
                                            </TextBlock>
                                            <ComboBox
                                                Grid.Column="9"
                                                ItemsSource="{Binding Source={x:Static local:RSSerialPort.ParityList}}"
                                                SelectedValue="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Parity, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

                                            <CheckBox
                                                Grid.Row="1"
                                                Grid.Column="0"
                                                Grid.ColumnSpan="2"
                                                Content="是否自动连接"
                                                IsChecked="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=IsAutoConnect, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                                        </Grid>

                                        <Border
                                            Grid.Row="1"
                                            Height="32"
                                            Padding="5,0,5,0"
                                            BorderBrush="#eee"
                                            BorderThickness="0,1,0,0">
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="auto" />
                                                    <ColumnDefinition />
                                                    <ColumnDefinition Width="auto" />
                                                </Grid.ColumnDefinitions>
                                                <TextBlock
                                                    Grid.Column="0"
                                                    Foreground="#949494"
                                                    Text="通讯点位配置" />
                                                <TextBlock
                                                    x:Name="PART_TxtConnectStatusDes"
                                                    Grid.Column="1"
                                                    HorizontalAlignment="Center" />
                                            </Grid>
                                        </Border>

                                        <Grid Grid.Row="2">
                                            <DataGrid
                                                x:Name="PART_DataGrid"
                                                Grid.Row="1"
                                                rs:ControlsHelper.EmptyDataDes="没有通讯配置..."
                                                IsReadOnly="False"
                                                ItemsSource="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ModbusDataConfigModelList, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                RowHeight="32"
                                                SelectedItem="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ModbusDataConfigModelSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                                                <DataGrid.ContextMenu>
                                                    <ContextMenu>
                                                        <MenuItem
                                                            x:Name="PART_BtnAddData"
                                                            Command="{TemplateBinding AddCommand}"
                                                            Header="新增数据" />
                                                        <MenuItem
                                                            x:Name="PART_BtnDelete"
                                                            Command="{TemplateBinding DeleteCommand}"
                                                            CommandParameter="0"
                                                            Header="删除选中" />
                                                        <MenuItem
                                                            x:Name="PART_BtnDeleteAll"
                                                            Command="{TemplateBinding DeleteCommand}"
                                                            CommandParameter="1"
                                                            Header="全部删除" />
                                                        <MenuItem
                                                            x:Name="PART_BtnImportConfig"
                                                            Command="{TemplateBinding ImportConfigCommand}"
                                                            Header="导入配置" />
                                                        <MenuItem
                                                            x:Name="PART_BtnExportConfig"
                                                            Command="{TemplateBinding ExportCommand}"
                                                            Header="导出配置" />
                                                        <Separator />
                                                        <MenuItem
                                                            x:Name="PART_BtnTemplateDownload"
                                                            Command="{TemplateBinding TemplateDownloadCommand}"
                                                            Header="模版下载" />
                                                    </ContextMenu>
                                                </DataGrid.ContextMenu>
                                                <DataGrid.Columns>
                                                    <DataGridTemplateColumn Width="*">
                                                        <DataGridTemplateColumn.Header>
                                                            <TextBlock Text="数据标签">
                                                                <TextBlock.ToolTip>
                                                                    <TextBlock TextWrapping="Wrap">
                                                                        <Run Text="上位机专用，主要用于数据绑定" />
                                                                    </TextBlock>
                                                                </TextBlock.ToolTip>
                                                            </TextBlock>
                                                        </DataGridTemplateColumn.Header>
                                                        <DataGridTemplateColumn.CellTemplate>
                                                            <DataTemplate>
                                                                <TextBlock
                                                                    Style="{StaticResource RSApp.Styles.DataGridTextBlockStyle}"
                                                                    Text="{Binding DataId, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=True}"
                                                                    ToolTip="{Binding DataId}" />
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellTemplate>
                                                        <DataGridTemplateColumn.CellEditingTemplate>
                                                            <DataTemplate>
                                                                <TextBox
                                                                    Margin="0"
                                                                    Padding="2"
                                                                    Text="{Binding DataId, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=True}">
                                                                    <i:Interaction.Triggers>
                                                                        <i:EventTrigger EventName="LostFocus">
                                                                            <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:RSSerialPort}}, Path=CellValueEditChangedCommand}" CommandParameter="DataId" />
                                                                        </i:EventTrigger>
                                                                    </i:Interaction.Triggers>
                                                                </TextBox>
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellEditingTemplate>
                                                    </DataGridTemplateColumn>

                                                    <DataGridTemplateColumn Width="*">
                                                        <DataGridTemplateColumn.Header>
                                                            <TextBlock Text="通讯站号">
                                                                <TextBlock.ToolTip>
                                                                    <TextBlock Width="400" TextWrapping="Wrap">
                                                                        <Run Text="1. 定义：Modbus通讯站号是在Modbus网络中，赋予每个设备的唯一标识编号。它就像是设备在网络中的“门牌号”，用于区分不同的设备，确保通信的准确性和针对性。" />
                                                                        <LineBreak /><LineBreak />
                                                                        <Run Text="2. 作用" />
                                                                        <LineBreak />
                                                                        <Run Text="    - 通信寻址：主站利用站号来精准定位目标从站设备。例如，在一个工业自动化系统中，主站需要与多个传感器、执行器等从站设备进行通信，通过站号就能准确地将数据发送给指定的从站，或从特定从站获取数据。" />
                                                                        <LineBreak />
                                                                        <Run Text="    - 数据识别：从站接收到数据帧后，通过检查站号判断该数据是否是发送给自己的。如果站号匹配，从站就会对数据进行处理；若不匹配，则会忽略该数据。" />
                                                                        <LineBreak /><LineBreak />
                                                                        <Run Text="3. 取值范围：在标准的Modbus RTU和ASCII模式下，站号取值范围通常是0 - 255。其中，0号站一般保留用于广播通信。例如，主站向所有从站发送统一的时间同步指令时，就可以使用站号0。1 - 255号站用于标识各个具体的从站设备。不过，不同设备厂商对站号的使用可能有特殊规定，实际应用时需参考设备手册。" />
                                                                        <LineBreak /><LineBreak />
                                                                        <Run Text="4. 设置方法：通常可通过设备的硬件拨码开关、软件配置界面或编程方式设置站号。比如，一些智能仪表可通过面板上的按键进入设置菜单，在菜单中选择站号设置选项，输入对应的数字来设置站号；而一些可编程逻辑控制器（PLC），可以通过编程软件在项目配置中设定站号。" />
                                                                        <LineBreak /><LineBreak />
                                                                        <Run Text="5. 站号冲突处理：如果网络中出现两个或多个设备站号相同的情况，会导致通信错误。此时，需要重新检查并修改冲突设备的站号，使其唯一。例如，在新设备接入网络时，要提前规划好站号，避免站号冲突；对于已出现冲突的情况，可借助设备的诊断工具找出冲突设备，然后逐一修改站号。" />
                                                                    </TextBlock>
                                                                </TextBlock.ToolTip>
                                                            </TextBlock>
                                                        </DataGridTemplateColumn.Header>


                                                        <DataGridTemplateColumn.CellTemplate>
                                                            <DataTemplate>
                                                                <TextBlock
                                                                    Style="{StaticResource RSApp.Styles.DataGridTextBlockStyle}"
                                                                    Text="{Binding StationNumber, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=True}"
                                                                    ToolTip="{Binding StationNumber}" />
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellTemplate>
                                                        <DataGridTemplateColumn.CellEditingTemplate>
                                                            <DataTemplate>
                                                                <TextBox
                                                                    Margin="0"
                                                                    Padding="2"
                                                                    Text="{Binding StationNumber, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=True}">
                                                                    <i:Interaction.Triggers>
                                                                        <i:EventTrigger EventName="LostFocus">
                                                                            <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:RSSerialPort}}, Path=CellValueEditChangedCommand}" CommandParameter="StationNumber" />
                                                                        </i:EventTrigger>
                                                                    </i:Interaction.Triggers>
                                                                </TextBox>
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellEditingTemplate>
                                                    </DataGridTemplateColumn>

                                                    <DataGridTemplateColumn Width="*">
                                                        <DataGridTemplateColumn.Header>
                                                            <TextBlock Text="功能码">
                                                                <TextBlock.ToolTip>
                                                                    <TextBlock TextWrapping="Wrap">
                                                                        <Run Text="以下是常见Modbus功能码的说明： " />
                                                                        <LineBreak />
                                                                        <Run Text="01（0x01） - 读取线圈状态 " />
                                                                        <LineBreak />
                                                                        <Run Text="02（0x02） - 读取离散输入 " />
                                                                        <LineBreak />
                                                                        <Run Text="03（0x03） - 读取保持寄存器 " />
                                                                        <LineBreak />
                                                                        <Run Text="04（0x04） - 读取输入寄存器 " />
                                                                        <LineBreak />
                                                                        <Run Text="05（0x05） - 强制单个线圈 " />
                                                                        <LineBreak />
                                                                        <Run Text="06（0x06） - 预置单个寄存器 " />
                                                                        <LineBreak />
                                                                        <Run Text="15（0x0F） - 强制多个线圈 " />
                                                                        <LineBreak />
                                                                        <Run Text="16（0x10） - 预置多个寄存器 " />
                                                                    </TextBlock>
                                                                </TextBlock.ToolTip>
                                                            </TextBlock>
                                                        </DataGridTemplateColumn.Header>
                                                        <DataGridTemplateColumn.CellTemplate>
                                                            <DataTemplate>
                                                                <TextBlock
                                                                    Style="{StaticResource RSApp.Styles.DataGridTextBlockStyle}"
                                                                    Text="{Binding FunctionCode, Converter={StaticResource EnumToHexConverter}, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=True}"
                                                                    ToolTip="{Binding FunctionCode}" />
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellTemplate>
                                                        <DataGridTemplateColumn.CellEditingTemplate>
                                                            <DataTemplate>
                                                                <ComboBox
                                                                    DisplayMemberPath="KeyDes"
                                                                    ItemsSource="{Binding Source={x:Static local:RSSerialPort.FunctionCodeList}}"
                                                                    SelectedValue="{Binding FunctionCode, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=True}"
                                                                    SelectedValuePath="Key"
                                                                    Style="{StaticResource RSApp.Styles.DataGridComboBoxStyle}">
                                                                    <i:Interaction.Triggers>
                                                                        <i:EventTrigger EventName="SelectionChanged">
                                                                            <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:RSSerialPort}}, Path=CellValueEditChangedCommand}" CommandParameter="FunctionCode" />
                                                                        </i:EventTrigger>
                                                                    </i:Interaction.Triggers>
                                                                </ComboBox>
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellEditingTemplate>
                                                    </DataGridTemplateColumn>

                                                    <DataGridTemplateColumn Width="*">
                                                        <DataGridTemplateColumn.Header>
                                                            <TextBlock Text="读取地址">
                                                                <TextBlock.ToolTip>
                                                                    <TextBlock Width="400" TextWrapping="Wrap">
                                                                        <Run Text="1. 定义：Modbus通讯地址是设备内部用于定位具体数据存储位置的编号。在Modbus网络中，站号确定了通信对象，而通讯地址则确定了在该设备中访问的数据位置，类似于在一个大型图书馆中，站号确定了具体的书架，而通讯地址确定了书架上某本书的具体位置。" />
                                                                        <LineBreak /><LineBreak />
                                                                        <Run Text="2. 地址类型" />
                                                                        <LineBreak />
                                                                        <Run Text="    - 线圈地址：用于访问离散输出点，每个线圈地址对应一个二进制状态（0或1），代表设备的输出开关状态，如控制电机的启动与停止、指示灯的亮灭等。例如，在一个自动化生产线中，通过向特定的线圈地址写入指令，可控制某个气缸的伸出与缩回。地址范围通常为0 - 65535。" />
                                                                        <LineBreak />
                                                                        <Run Text="    - 离散输入地址：用于读取离散输入点的状态，同样以二进制值表示，反映外部设备的输入状态，如检测按钮是否按下、限位开关是否触发等。比如，在电梯控制系统中，离散输入地址可用于获取电梯门的开关状态信息。地址范围一般也是0 - 65535。" />
                                                                        <LineBreak />
                                                                        <Run Text="    - 保持寄存器地址：用于读写存储在设备中的可修改的数值型数据，像设备的设定值、参数等都存储在此。例如，在温度控制系统中，可通过保持寄存器地址设置目标温度值。每个保持寄存器通常占用16位（2个字节），地址范围常见为0 - 65535。" />
                                                                        <LineBreak />
                                                                        <Run Text="    - 输入寄存器地址：用于读取设备中的只读数值型数据，一般用于获取传感器测量值等。比如在智能电表中，通过输入寄存器地址可读取实时的电压、电流测量值。与保持寄存器类似，每个输入寄存器占用16位，地址范围0 - 65535。" />
                                                                        <LineBreak /><LineBreak />
                                                                        <Run Text="3. 作用：在Modbus通信中，主站与从站进行数据交互时，必须同时指定正确的站号和通讯地址，才能准确地读取或写入数据。例如，主站想要获取某个压力传感器的测量值，先通过站号找到对应的传感器设备，再依据输入寄存器地址定位到存储压力数据的位置，从而完成数据读取。" />
                                                                        <LineBreak /><LineBreak />
                                                                        <Run Text="4. 地址映射：不同设备对地址的映射方式存在差异。有些设备会将地址进行分区，如将线圈地址、寄存器地址分别划分在不同的区域；有些设备则可能会有特殊的地址偏移规则，例如实际地址需在原始地址基础上加某个固定值。在实际应用中，必须依据设备的说明书来正确理解和使用地址映射关系，确保通信的准确性。" />
                                                                        <LineBreak /><LineBreak />
                                                                        <Run Text="5. 注意事项" />
                                                                        <LineBreak />
                                                                        <Run Text="    - 地址连续性：在读取或写入多个连续地址的数据时，要确保地址的连续性，否则可能导致数据读取错误或写入失败。" />
                                                                        <LineBreak />
                                                                        <Run Text="    - 地址重叠：避免不同类型的数据地址出现重叠，否则会引发数据冲突和错误。" />
                                                                    </TextBlock>
                                                                </TextBlock.ToolTip>
                                                            </TextBlock>
                                                        </DataGridTemplateColumn.Header>
                                                        <DataGridTemplateColumn.CellTemplate>
                                                            <DataTemplate>
                                                                <TextBlock
                                                                    Style="{StaticResource RSApp.Styles.DataGridTextBlockStyle}"
                                                                    Text="{Binding Address, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=True}"
                                                                    ToolTip="{Binding Address}" />
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellTemplate>
                                                        <DataGridTemplateColumn.CellEditingTemplate>
                                                            <DataTemplate>
                                                                <TextBox
                                                                    Margin="0"
                                                                    Padding="2"
                                                                    Text="{Binding Address, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=True}">
                                                                    <i:Interaction.Triggers>
                                                                        <i:EventTrigger EventName="LostFocus">
                                                                            <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:RSSerialPort}}, Path=CellValueEditChangedCommand}" CommandParameter="Address" />
                                                                        </i:EventTrigger>
                                                                    </i:Interaction.Triggers>
                                                                </TextBox>
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellEditingTemplate>
                                                    </DataGridTemplateColumn>


                                                    <DataGridTemplateColumn Width="*">
                                                        <DataGridTemplateColumn.Header>
                                                            <TextBlock Text="字节序">
                                                                <TextBlock.ToolTip>
                                                                    <TextBlock Width="400" TextWrapping="Wrap">
                                                                        <Run Text="在Modbus通讯中，高低字节序通常有以下四种情况，以32位数据ABCD（每个字母代表一个字节）为例： " />
                                                                        <LineBreak />
                                                                        <Run Text="1. Big - endian（大端序） " />
                                                                        <LineBreak />
                                                                        <Run Text="   - 字节顺序：ABCD " />
                                                                        <LineBreak />
                                                                        <Run Text="   - 说明：高位字节存于低地址，低位字节存于高地址。符合人类正常思维习惯，数据高位在前低位在后，如对于32位整数0x12345678，按此顺序内存中地址由低到高存储为0x12、0x34、0x56、0x78。 " />
                                                                        <LineBreak />
                                                                        <Run Text="2. Big - endian byte swap（大端序字节交换） " />
                                                                        <LineBreak />
                                                                        <Run Text="   - 字节顺序：BADC " />
                                                                        <LineBreak />
                                                                        <Run Text="   - 说明：先按大端序排列为ABCD，再将每个字内的字节进行交换，即AB交换为BA，CD交换为DC，得到BADC。 " />
                                                                        <LineBreak />
                                                                        <Run Text="3. Little - endian byte swap（小端序字节交换） " />
                                                                        <LineBreak />
                                                                        <Run Text="   - 字节顺序：CDAB " />
                                                                        <LineBreak />
                                                                        <Run Text="   - 说明：先将32位数据按小端序排列为DCBA，再将每个字内的字节进行交换，即DC交换为CD，BA交换为AB，最终为CDAB。 " />
                                                                        <LineBreak />
                                                                        <Run Text="4. Little - endian（小端序） " />
                                                                        <LineBreak />
                                                                        <Run Text="   - 字节顺序：DCBA " />
                                                                        <LineBreak />
                                                                        <Run Text="   - 说明：与大端序相反，低位字节存于低地址，高位字节存于高地址。对于0x12345678，在小端模式下内存中地址由低到高存储为0x78、0x56、0x34、0x12。 " />
                                                                    </TextBlock>
                                                                </TextBlock.ToolTip>
                                                            </TextBlock>
                                                        </DataGridTemplateColumn.Header>
                                                        <DataGridTemplateColumn.CellTemplate>
                                                            <DataTemplate>
                                                                <TextBlock
                                                                    Style="{StaticResource RSApp.Styles.DataGridTextBlockStyle}"
                                                                    Text="{Binding ByteOrder, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=True}"
                                                                    ToolTip="{Binding ByteOrder}" />
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellTemplate>
                                                        <DataGridTemplateColumn.CellEditingTemplate>
                                                            <DataTemplate>
                                                                <ComboBox
                                                                    ItemsSource="{Binding Source={x:Static local:RSSerialPort.ByteOrderList}}"
                                                                    SelectedValue="{Binding ByteOrder, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=True}"
                                                                    Style="{StaticResource RSApp.Styles.DataGridComboBoxStyle}">
                                                                    <i:Interaction.Triggers>
                                                                        <i:EventTrigger EventName="SelectionChanged">
                                                                            <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:RSSerialPort}}, Path=CellValueEditChangedCommand}" CommandParameter="ByteOrder" />
                                                                        </i:EventTrigger>
                                                                    </i:Interaction.Triggers>
                                                                </ComboBox>
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellEditingTemplate>
                                                    </DataGridTemplateColumn>


                                                    <DataGridTemplateColumn Width="*">
                                                        <DataGridTemplateColumn.Header>
                                                            <TextBlock Text="数据类型">
                                                                <TextBlock.ToolTip>
                                                                    <TextBlock TextWrapping="Wrap">
                                                                        <Run Text="请注意，这里的数据类型是指C#里的数据类型，并不是通用的" />
                                                                    </TextBlock>
                                                                </TextBlock.ToolTip>
                                                            </TextBlock>
                                                        </DataGridTemplateColumn.Header>
                                                        <DataGridTemplateColumn.CellTemplate>
                                                            <DataTemplate>
                                                                <TextBlock
                                                                    Style="{StaticResource RSApp.Styles.DataGridTextBlockStyle}"
                                                                    Text="{Binding DataType, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=True}"
                                                                    ToolTip="{Binding DataType}" />
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellTemplate>
                                                        <DataGridTemplateColumn.CellEditingTemplate>
                                                            <DataTemplate>
                                                                <ComboBox
                                                                    ItemsSource="{Binding Source={x:Static local:RSSerialPort.DataTypeList}}"
                                                                    SelectedValue="{Binding DataType, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=True}"
                                                                    Style="{StaticResource RSApp.Styles.DataGridComboBoxStyle}">
                                                                    <i:Interaction.Triggers>
                                                                        <i:EventTrigger EventName="SelectionChanged">
                                                                            <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:RSSerialPort}}, Path=CellValueEditChangedCommand}" CommandParameter="DataType" />
                                                                        </i:EventTrigger>
                                                                    </i:Interaction.Triggers>
                                                                </ComboBox>
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellEditingTemplate>
                                                    </DataGridTemplateColumn>


                                                    <DataGridTemplateColumn Width="*">
                                                        <DataGridTemplateColumn.Header>
                                                            <TextBlock Text="字符长度">
                                                                <TextBlock.ToolTip>
                                                                    <TextBlock TextWrapping="Wrap">
                                                                        <Run Text="请注意，仅在数据类型是String时，字符长度设置才有效" />
                                                                    </TextBlock>
                                                                </TextBlock.ToolTip>
                                                            </TextBlock>
                                                        </DataGridTemplateColumn.Header>
                                                        <DataGridTemplateColumn.CellTemplate>
                                                            <DataTemplate>
                                                                <TextBlock
                                                                    Style="{StaticResource RSApp.Styles.DataGridTextBlockStyle}"
                                                                    Text="{Binding CharacterLength}"
                                                                    ToolTip="{Binding CharacterLength}" />
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellTemplate>
                                                        <DataGridTemplateColumn.CellEditingTemplate>
                                                            <DataTemplate>
                                                                <TextBox
                                                                    x:Name="PART_TxtCharacterLength"
                                                                    Margin="0"
                                                                    Padding="2"
                                                                    Text="{Binding CharacterLength, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=True}"
                                                                    Visibility="Collapsed">
                                                                    <i:Interaction.Triggers>
                                                                        <i:EventTrigger EventName="LostFocus">
                                                                            <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:RSSerialPort}}, Path=CellValueEditChangedCommand}" CommandParameter="CharacterLength" />
                                                                        </i:EventTrigger>
                                                                    </i:Interaction.Triggers>
                                                                </TextBox>
                                                                <DataTemplate.Triggers>
                                                                    <DataTrigger Binding="{Binding DataType}" Value="String">
                                                                        <Setter TargetName="PART_TxtCharacterLength" Property="Visibility" Value="Visible" />
                                                                    </DataTrigger>
                                                                </DataTemplate.Triggers>
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellEditingTemplate>
                                                    </DataGridTemplateColumn>

                                                    <DataGridTemplateColumn Width="*">
                                                        <DataGridTemplateColumn.Header>
                                                            <TextBlock Text="字符反转">
                                                                <TextBlock.ToolTip>
                                                                    <TextBlock TextWrapping="Wrap">
                                                                        <Run Text="请注意，仅在数据类型是String时，字符反转才有效" />
                                                                    </TextBlock>
                                                                </TextBlock.ToolTip>
                                                            </TextBlock>
                                                        </DataGridTemplateColumn.Header>
                                                        <DataGridTemplateColumn.CellTemplate>
                                                            <DataTemplate>
                                                                <TextBlock
                                                                    Style="{StaticResource RSApp.Styles.DataGridTextBlockStyle}"
                                                                    Text="{Binding IsStringInverse}"
                                                                    ToolTip="{Binding IsStringInverse}" />
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellTemplate>
                                                        <DataGridTemplateColumn.CellEditingTemplate>
                                                            <DataTemplate>
                                                                <CheckBox
                                                                    x:Name="PART_CkIsStringInverse"
                                                                    IsChecked="{Binding IsStringInverse}"
                                                                    Visibility="Collapsed">
                                                                    <i:Interaction.Triggers>
                                                                        <i:EventTrigger EventName="Checked">
                                                                            <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:RSSerialPort}}, Path=CellValueEditChangedCommand}" CommandParameter="ReadWritePermission" />
                                                                        </i:EventTrigger>
                                                                    </i:Interaction.Triggers>
                                                                </CheckBox>
                                                                <DataTemplate.Triggers>
                                                                    <DataTrigger Binding="{Binding DataType}" Value="String">
                                                                        <Setter TargetName="PART_CkIsStringInverse" Property="Visibility" Value="Visible" />
                                                                    </DataTrigger>
                                                                </DataTemplate.Triggers>
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellEditingTemplate>
                                                    </DataGridTemplateColumn>

                                                    <DataGridTemplateColumn Width="*">
                                                        <DataGridTemplateColumn.Header>
                                                            <TextBlock Text="读写权限">
                                                                <TextBlock.ToolTip>
                                                                    <TextBlock TextWrapping="Wrap">
                                                                        <Run Text="0 代表只读" />
                                                                        <LineBreak />
                                                                        <Run Text="1 代表只读写" />
                                                                    </TextBlock>
                                                                </TextBlock.ToolTip>
                                                            </TextBlock>
                                                        </DataGridTemplateColumn.Header>
                                                        <DataGridTemplateColumn.CellTemplate>
                                                            <DataTemplate>
                                                                <TextBlock
                                                                    Style="{StaticResource RSApp.Styles.DataGridTextBlockStyle}"
                                                                    Text="{Binding ReadWritePermission, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=True}"
                                                                    ToolTip="{Binding ReadWritePermission}" />
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellTemplate>
                                                        <DataGridTemplateColumn.CellEditingTemplate>
                                                            <DataTemplate>
                                                                <ComboBox
                                                                    ItemsSource="{Binding Source={x:Static local:RSSerialPort.ReadWritePermissionList}}"
                                                                    SelectedValue="{Binding ReadWritePermission, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=True}"
                                                                    Style="{StaticResource RSApp.Styles.DataGridComboBoxStyle}">
                                                                    <i:Interaction.Triggers>
                                                                        <i:EventTrigger EventName="SelectionChanged">
                                                                            <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:RSSerialPort}}, Path=CellValueEditChangedCommand}" CommandParameter="ReadWritePermission" />
                                                                        </i:EventTrigger>
                                                                    </i:Interaction.Triggers>
                                                                </ComboBox>
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellEditingTemplate>
                                                    </DataGridTemplateColumn>

                                                    <DataGridTemplateColumn Width="*">
                                                        <DataGridTemplateColumn.Header>
                                                            <TextBlock Text="最小值">
                                                                <TextBlock.ToolTip>
                                                                    <TextBlock TextWrapping="Wrap">
                                                                        <Run Text="数据写入最小值限制" />
                                                                    </TextBlock>
                                                                </TextBlock.ToolTip>
                                                            </TextBlock>
                                                        </DataGridTemplateColumn.Header>

                                                        <DataGridTemplateColumn.CellTemplate>
                                                            <DataTemplate>
                                                                <TextBlock
                                                                    Style="{StaticResource RSApp.Styles.DataGridTextBlockStyle}"
                                                                    Text="{Binding MinValue, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=True}"
                                                                    ToolTip="{Binding MinValue}" />
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellTemplate>
                                                        <DataGridTemplateColumn.CellEditingTemplate>
                                                            <DataTemplate>
                                                                <TextBox
                                                                    x:Name="PART_TxtMinValue"
                                                                    Margin="0"
                                                                    Padding="2"
                                                                    Text="{Binding MinValue, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=True}">
                                                                    <i:Interaction.Triggers>
                                                                        <i:EventTrigger EventName="LostFocus">
                                                                            <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:RSSerialPort}}, Path=CellValueEditChangedCommand}" CommandParameter="MinValue" />
                                                                        </i:EventTrigger>
                                                                    </i:Interaction.Triggers>
                                                                </TextBox>
                                                                <DataTemplate.Triggers>
                                                                    <DataTrigger Binding="{Binding DataType}" Value="Bool">
                                                                        <Setter TargetName="PART_TxtMinValue" Property="Visibility" Value="Collapsed" />
                                                                    </DataTrigger>
                                                                    <DataTrigger Binding="{Binding DataType}" Value="String">
                                                                        <Setter TargetName="PART_TxtMinValue" Property="Visibility" Value="Collapsed" />
                                                                    </DataTrigger>
                                                                </DataTemplate.Triggers>
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellEditingTemplate>
                                                    </DataGridTemplateColumn>


                                                    <DataGridTemplateColumn Width="*">
                                                        <DataGridTemplateColumn.Header>
                                                            <TextBlock Text="最大值">
                                                                <TextBlock.ToolTip>
                                                                    <TextBlock TextWrapping="Wrap">
                                                                        <Run Text="数据写入最大值限制" />
                                                                    </TextBlock>
                                                                </TextBlock.ToolTip>
                                                            </TextBlock>
                                                        </DataGridTemplateColumn.Header>

                                                        <DataGridTemplateColumn.CellTemplate>
                                                            <DataTemplate>
                                                                <TextBlock
                                                                    Style="{StaticResource RSApp.Styles.DataGridTextBlockStyle}"
                                                                    Text="{Binding MaxValue, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=True}"
                                                                    ToolTip="{Binding MaxValue}" />
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellTemplate>
                                                        <DataGridTemplateColumn.CellEditingTemplate>
                                                            <DataTemplate>
                                                                <TextBox
                                                                    x:Name="PART_TxtMaxValue"
                                                                    Margin="0"
                                                                    Padding="2"
                                                                    Text="{Binding MaxValue, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=True}">
                                                                    <i:Interaction.Triggers>
                                                                        <i:EventTrigger EventName="LostFocus">
                                                                            <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:RSSerialPort}}, Path=CellValueEditChangedCommand}" CommandParameter="MaxValue" />
                                                                        </i:EventTrigger>
                                                                    </i:Interaction.Triggers>
                                                                </TextBox>
                                                                <DataTemplate.Triggers>
                                                                    <DataTrigger Binding="{Binding DataType}" Value="Bool">
                                                                        <Setter TargetName="PART_TxtMaxValue" Property="Visibility" Value="Collapsed" />
                                                                    </DataTrigger>
                                                                    <DataTrigger Binding="{Binding DataType}" Value="String">
                                                                        <Setter TargetName="PART_TxtMaxValue" Property="Visibility" Value="Collapsed" />
                                                                    </DataTrigger>
                                                                </DataTemplate.Triggers>
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellEditingTemplate>
                                                    </DataGridTemplateColumn>

                                                    <DataGridTemplateColumn Width="*">
                                                        <DataGridTemplateColumn.Header>
                                                            <TextBlock Text="小数位数">
                                                                <TextBlock.ToolTip>
                                                                    <TextBlock TextWrapping="Wrap">
                                                                        <Run Text="小数点保留位数仅float和double类型有效" />
                                                                    </TextBlock>
                                                                </TextBlock.ToolTip>
                                                            </TextBlock>
                                                        </DataGridTemplateColumn.Header>

                                                        <DataGridTemplateColumn.CellTemplate>
                                                            <DataTemplate>
                                                                <TextBlock
                                                                    Style="{StaticResource RSApp.Styles.DataGridTextBlockStyle}"
                                                                    Text="{Binding DigitalNumber, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=True}"
                                                                    ToolTip="{Binding DigitalNumber}" />
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellTemplate>
                                                        <DataGridTemplateColumn.CellEditingTemplate>
                                                            <DataTemplate>
                                                                <TextBox
                                                                    x:Name="PART_TxtDigitalNumber"
                                                                    Margin="0"
                                                                    Padding="2"
                                                                    Text="{Binding DigitalNumber, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=True}"
                                                                    Visibility="Collapsed">
                                                                    <i:Interaction.Triggers>
                                                                        <i:EventTrigger EventName="LostFocus">
                                                                            <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:RSSerialPort}}, Path=CellValueEditChangedCommand}" CommandParameter="DigitalNumber" />
                                                                        </i:EventTrigger>
                                                                    </i:Interaction.Triggers>
                                                                </TextBox>
                                                                <DataTemplate.Triggers>
                                                                    <DataTrigger Binding="{Binding DataType}" Value="Float">
                                                                        <Setter TargetName="PART_TxtDigitalNumber" Property="Visibility" Value="Visible" />
                                                                    </DataTrigger>
                                                                    <DataTrigger Binding="{Binding DataType}" Value="Double">
                                                                        <Setter TargetName="PART_TxtDigitalNumber" Property="Visibility" Value="Visible" />
                                                                    </DataTrigger>
                                                                </DataTemplate.Triggers>
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellEditingTemplate>
                                                    </DataGridTemplateColumn>


                                                    <DataGridTemplateColumn Width="*">
                                                        <DataGridTemplateColumn.Header>
                                                            <TextBlock Text="数据分组">
                                                                <TextBlock.ToolTip>
                                                                    <TextBlock TextWrapping="Wrap">
                                                                        <Run Text="同一个数据分组，在数据采集时会进行连续读取" />
                                                                    </TextBlock>
                                                                </TextBlock.ToolTip>
                                                            </TextBlock>
                                                        </DataGridTemplateColumn.Header>
                                                        <DataGridTemplateColumn.CellTemplate>
                                                            <DataTemplate>
                                                                <TextBlock
                                                                    Style="{StaticResource RSApp.Styles.DataGridTextBlockStyle}"
                                                                    Text="{Binding DataGroup, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=True}"
                                                                    ToolTip="{Binding DataGroup}" />
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellTemplate>
                                                        <DataGridTemplateColumn.CellEditingTemplate>
                                                            <DataTemplate>
                                                                <TextBox
                                                                    Margin="0"
                                                                    Padding="2"
                                                                    Text="{Binding DataGroup, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=True}">
                                                                    <i:Interaction.Triggers>
                                                                        <i:EventTrigger EventName="LostFocus">
                                                                            <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:RSSerialPort}}, Path=CellValueEditChangedCommand}" CommandParameter="DataGroup" />
                                                                        </i:EventTrigger>
                                                                    </i:Interaction.Triggers>
                                                                </TextBox>
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellEditingTemplate>
                                                    </DataGridTemplateColumn>

                                                    <DataGridTemplateColumn Width="*">
                                                        <DataGridTemplateColumn.Header>
                                                            <TextBlock Text="数据描述">
                                                                <TextBlock.ToolTip>
                                                                    <TextBlock TextWrapping="Wrap">
                                                                        <Run Text="就是对数据标签的备注说明，这个数据标签在做什么用的" />
                                                                    </TextBlock>
                                                                </TextBlock.ToolTip>
                                                            </TextBlock>
                                                        </DataGridTemplateColumn.Header>
                                                        <DataGridTemplateColumn.CellTemplate>
                                                            <DataTemplate>
                                                                <TextBlock
                                                                    Style="{StaticResource RSApp.Styles.DataGridTextBlockStyle}"
                                                                    Text="{Binding DataDescription, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=True}"
                                                                    ToolTip="{Binding DataDescription}" />
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellTemplate>
                                                        <DataGridTemplateColumn.CellEditingTemplate>
                                                            <DataTemplate>
                                                                <TextBox
                                                                    Margin="0"
                                                                    Padding="2"
                                                                    Text="{Binding DataDescription, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=True}">
                                                                    <i:Interaction.Triggers>
                                                                        <i:EventTrigger EventName="LostFocus">
                                                                            <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:RSSerialPort}}, Path=CellValueEditChangedCommand}" CommandParameter="DataDescription" />
                                                                        </i:EventTrigger>
                                                                    </i:Interaction.Triggers>
                                                                </TextBox>
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellEditingTemplate>
                                                    </DataGridTemplateColumn>

                                                    <DataGridTemplateColumn
                                                        Width="*"
                                                        Header="数据值"
                                                        IsReadOnly="True">
                                                        <DataGridTemplateColumn.CellTemplate>
                                                            <DataTemplate>
                                                                <TextBlock
                                                                    Style="{StaticResource RSApp.Styles.DataGridTextBlockStyle}"
                                                                    Text="{Binding DataValue, StringFormat='{}{0:N2}'}"
                                                                    ToolTip="{Binding DataValue}" />
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellTemplate>
                                                    </DataGridTemplateColumn>
                                                </DataGrid.Columns>
                                            </DataGrid>
                                        </Grid>
                                        <TextBox
                                            Grid.Row="3"
                                            Height="200"
                                            Margin="0"
                                            VerticalContentAlignment="Top"
                                            rs:ControlsHelper.CornerRadius="0"
                                            rs:TextBoxHelper.Watermark="通讯日志信息"
                                            BorderThickness="0,1,0,0"
                                            IsReadOnly="True" />
                                    </Grid>
                                </GroupBox>
                            </rs:RSDialog>

                            <ControlTemplate.Triggers>
                                <Trigger Property="ModbusDataConfigModelSelected" Value="{x:Null}">
                                    <Setter TargetName="PART_BtnDelete" Property="IsEnabled" Value="False" />
                                </Trigger>
                                <Trigger Property="ModbusDataConfigModelList" Value="{x:Null}">
                                    <Setter TargetName="PART_BtnDeleteAll" Property="IsEnabled" Value="False" />
                                </Trigger>
                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=ModbusDataConfigModelList.Count, Mode=OneWay}" Value="0">
                                    <Setter TargetName="PART_BtnDeleteAll" Property="IsEnabled" Value="False" />
                                </DataTrigger>
                                <Trigger Property="IsConnectSuccess" Value="{x:Null}">
                                    <Setter TargetName="PART_TxtConnectStatusDes" Property="Visibility" Value="Collapsed" />
                                </Trigger>
                                <Trigger Property="IsConnectSuccess" Value="True">
                                    <Setter TargetName="PART_TxtConnectStatusDes" Property="Foreground" Value="#06b025" />
                                    <Setter TargetName="PART_TxtConnectStatusDes" Property="Text" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CommunicationTime, StringFormat='{}设备连接成功 {0:yyyy-MM-dd HH:mm:ss}'}" />
                                </Trigger>
                                <Trigger Property="IsConnectSuccess" Value="False">
                                    <Setter TargetName="PART_TxtConnectStatusDes" Property="Foreground" Value="#DC3545" />
                                    <Setter TargetName="PART_TxtConnectStatusDes" Property="Text" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CommunicationTime, StringFormat='{}设备连接失败 {0:yyyy-MM-dd HH:mm:ss}'}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </local:RSSerialPort.Resources>
</local:RSSerialPort>
